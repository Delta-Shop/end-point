/**
 * delat_shop
 * This is an example of using OAuth2 Access Code Flow in a specification to describe security to your API.
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Category from './Category';

/**
 * The Product model module.
 * @module model/Product
 * @version 4.0.0
 */
class Product {
    /**
     * Constructs a new <code>Product</code>.
     * a shopping item a user can buy
     * @alias module:model/Product
     * @param name {String} 
     * @param price {Number} 
     * @param currency {module:model/Product.CurrencyEnum} 
     * @param summaryDisc {String} 
     * @param category {module:model/Category} 
     */
    constructor(name, price, currency, summaryDisc, category) { 
        
        Product.initialize(this, name, price, currency, summaryDisc, category);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, price, currency, summaryDisc, category) { 
        obj['name'] = name;
        obj['price'] = price;
        obj['currency'] = currency;
        obj['summary_disc'] = summaryDisc;
        obj['category'] = category;
    }

    /**
     * Constructs a <code>Product</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Product} obj Optional instance to populate.
     * @return {module:model/Product} The populated <code>Product</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Product();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('images_link')) {
                obj['images_link'] = ApiClient.convertToType(data['images_link'], ['String']);
            }
            if (data.hasOwnProperty('price')) {
                obj['price'] = ApiClient.convertToType(data['price'], 'Number');
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
            }
            if (data.hasOwnProperty('summary_disc')) {
                obj['summary_disc'] = ApiClient.convertToType(data['summary_disc'], 'String');
            }
            if (data.hasOwnProperty('category')) {
                obj['category'] = Category.constructFromObject(data['category']);
            }
            if (data.hasOwnProperty('available_stock')) {
                obj['available_stock'] = ApiClient.convertToType(data['available_stock'], 'Number');
            }
        }
        return obj;
    }


}

/**
 * @member {Number} id
 */
Product.prototype['id'] = undefined;

/**
 * @member {String} name
 */
Product.prototype['name'] = undefined;

/**
 * @member {Array.<String>} images_link
 */
Product.prototype['images_link'] = undefined;

/**
 * @member {Number} price
 */
Product.prototype['price'] = undefined;

/**
 * @member {module:model/Product.CurrencyEnum} currency
 */
Product.prototype['currency'] = undefined;

/**
 * @member {String} summary_disc
 */
Product.prototype['summary_disc'] = undefined;

/**
 * @member {module:model/Category} category
 */
Product.prototype['category'] = undefined;

/**
 * @member {Number} available_stock
 */
Product.prototype['available_stock'] = undefined;





/**
 * Allowed values for the <code>currency</code> property.
 * @enum {String}
 * @readonly
 */
Product['CurrencyEnum'] = {

    /**
     * value: "usd"
     * @const
     */
    "usd": "usd",

    /**
     * value: "egp"
     * @const
     */
    "egp": "egp",

    /**
     * value: "eur"
     * @const
     */
    "eur": "eur"
};



export default Product;

