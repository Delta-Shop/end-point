/**
 * delat_shop
 * This is an example of using OAuth2 Access Code Flow in a specification to describe security to your API.
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Cart from '../model/Cart';
import CartItem from '../model/CartItem';
import InlineResponse201 from '../model/InlineResponse201';

/**
* Cart service.
* @module api/CartApi
* @version 4.0.0
*/
export default class CartApi {

    /**
    * Constructs a new CartApi. 
    * @alias module:api/CartApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addCartByUserId operation.
     * @callback module:api/CartApi~addCartByUserIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Cart} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updating user cart
     * @param {Number} userId 
     * @param {Array.<module:model/CartItem>} cartItems 
     * @param {module:api/CartApi~addCartByUserIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Cart}
     */
    addCartByUserId(userId, cartItems, callback) {
      let postBody = cartItems;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling addCartByUserId");
      }
      // verify the required parameter 'cartItems' is set
      if (cartItems === undefined || cartItems === null) {
        throw new Error("Missing the required parameter 'cartItems' when calling addCartByUserId");
      }

      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessCode'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Cart;
      return this.apiClient.callApi(
        '/users/{user_id}/cart', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addCartItemByUserId operation.
     * @callback module:api/CartApi~addCartItemByUserIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Cart} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * adding/change count of item
     * @param {Number} userId 
     * @param {module:model/CartItem} cartItem 
     * @param {module:api/CartApi~addCartItemByUserIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Cart}
     */
    addCartItemByUserId(userId, cartItem, callback) {
      let postBody = cartItem;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling addCartItemByUserId");
      }
      // verify the required parameter 'cartItem' is set
      if (cartItem === undefined || cartItem === null) {
        throw new Error("Missing the required parameter 'cartItem' when calling addCartItemByUserId");
      }

      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessCode'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Cart;
      return this.apiClient.callApi(
        '/users/{user_id}/cart/item', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the checkoutCart operation.
     * @callback module:api/CartApi~checkoutCartCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse201} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * checkout user cart
     * @param {Number} userId 
     * @param {module:api/CartApi~checkoutCartCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse201}
     */
    checkoutCart(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling checkoutCart");
      }

      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessCode'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse201;
      return this.apiClient.callApi(
        '/users/{user_id}/checkout', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCartItemByUserIdAndProductId operation.
     * @callback module:api/CartApi~deleteCartItemByUserIdAndProductIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Cart} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * remove item from cart
     * @param {Number} userId 
     * @param {Number} productId 
     * @param {module:api/CartApi~deleteCartItemByUserIdAndProductIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Cart}
     */
    deleteCartItemByUserIdAndProductId(userId, productId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling deleteCartItemByUserIdAndProductId");
      }
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling deleteCartItemByUserIdAndProductId");
      }

      let pathParams = {
        'user_id': userId,
        'product_id': productId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessCode'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Cart;
      return this.apiClient.callApi(
        '/users/{user_id}/cart/item/{product_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePendingItemsByUserId operation.
     * @callback module:api/CartApi~deletePendingItemsByUserIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * remove item from pending as mean to cancel order
     * @param {Number} userId 
     * @param {Number} cartId 
     * @param {module:api/CartApi~deletePendingItemsByUserIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deletePendingItemsByUserId(userId, cartId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling deletePendingItemsByUserId");
      }
      // verify the required parameter 'cartId' is set
      if (cartId === undefined || cartId === null) {
        throw new Error("Missing the required parameter 'cartId' when calling deletePendingItemsByUserId");
      }

      let pathParams = {
        'user_id': userId,
        'cart_id': cartId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessCode'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/users/{user_id}/pending_items/{cart_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listCartByUserId operation.
     * @callback module:api/CartApi~listCartByUserIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Cart} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns cart by User ID.
     * @param {Number} userId 
     * @param {module:api/CartApi~listCartByUserIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Cart}
     */
    listCartByUserId(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling listCartByUserId");
      }

      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessCode'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Cart;
      return this.apiClient.callApi(
        '/users/{user_id}/cart', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listPendingItemsByUserId operation.
     * @callback module:api/CartApi~listPendingItemsByUserIdCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Cart>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * list pending items for user
     * @param {Number} userId 
     * @param {module:api/CartApi~listPendingItemsByUserIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Cart>}
     */
    listPendingItemsByUserId(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling listPendingItemsByUserId");
      }

      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessCode'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Cart];
      return this.apiClient.callApi(
        '/users/{user_id}/pending_items', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
