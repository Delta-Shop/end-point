/**
 * delat_shop
 * This is an example of using OAuth2 Access Code Flow in a specification to describe security to your API.
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Category from '../model/Category';
import Product from '../model/Product';

/**
* Catagories service.
* @module api/CatagoriesApi
* @version 4.0.0
*/
export default class CatagoriesApi {

    /**
    * Constructs a new CatagoriesApi. 
    * @alias module:api/CatagoriesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addCatagories operation.
     * @callback module:api/CatagoriesApi~addCatagoriesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new catagort.
     * @param {module:model/Category} category 
     * @param {module:api/CatagoriesApi~addCatagoriesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addCatagories(category, callback) {
      let postBody = category;
      // verify the required parameter 'category' is set
      if (category === undefined || category === null) {
        throw new Error("Missing the required parameter 'category' when calling addCatagories");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessCode'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/catagories', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCategoryByName operation.
     * @callback module:api/CatagoriesApi~deleteCategoryByNameCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * deleting category
     * @param {String} categoryName 
     * @param {module:api/CatagoriesApi~deleteCategoryByNameCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteCategoryByName(categoryName, callback) {
      let postBody = null;
      // verify the required parameter 'categoryName' is set
      if (categoryName === undefined || categoryName === null) {
        throw new Error("Missing the required parameter 'categoryName' when calling deleteCategoryByName");
      }

      let pathParams = {
        'category_name': categoryName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessCode'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/catagories/{category_name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCategoryByName operation.
     * @callback module:api/CatagoriesApi~getCategoryByNameCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Category} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a Category by its name.
     * @param {String} categoryName 
     * @param {module:api/CatagoriesApi~getCategoryByNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Category}
     */
    getCategoryByName(categoryName, callback) {
      let postBody = null;
      // verify the required parameter 'categoryName' is set
      if (categoryName === undefined || categoryName === null) {
        throw new Error("Missing the required parameter 'categoryName' when calling getCategoryByName");
      }

      let pathParams = {
        'category_name': categoryName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessCode'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Category;
      return this.apiClient.callApi(
        '/catagories/{category_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listCatagories operation.
     * @callback module:api/CatagoriesApi~listCatagoriesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Category} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getting all Catagories.
     * @param {module:api/CatagoriesApi~listCatagoriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Category}
     */
    listCatagories(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessCode'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Category;
      return this.apiClient.callApi(
        '/catagories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listProductsByCategory operation.
     * @callback module:api/CatagoriesApi~listProductsByCategoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Product} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a products by category Name.
     * @param {String} categoryName 
     * @param {module:api/CatagoriesApi~listProductsByCategoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Product}
     */
    listProductsByCategory(categoryName, callback) {
      let postBody = null;
      // verify the required parameter 'categoryName' is set
      if (categoryName === undefined || categoryName === null) {
        throw new Error("Missing the required parameter 'categoryName' when calling listProductsByCategory");
      }

      let pathParams = {
        'category_name': categoryName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessCode'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Product;
      return this.apiClient.callApi(
        '/catagries/{category_name}/products', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCategoryByName operation.
     * @callback module:api/CatagoriesApi~updateCategoryByNameCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Category} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * renaming Category
     * @param {String} categoryName 
     * @param {module:model/Category} category 
     * @param {module:api/CatagoriesApi~updateCategoryByNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Category}
     */
    updateCategoryByName(categoryName, category, callback) {
      let postBody = category;
      // verify the required parameter 'categoryName' is set
      if (categoryName === undefined || categoryName === null) {
        throw new Error("Missing the required parameter 'categoryName' when calling updateCategoryByName");
      }
      // verify the required parameter 'category' is set
      if (category === undefined || category === null) {
        throw new Error("Missing the required parameter 'category' when calling updateCategoryByName");
      }

      let pathParams = {
        'category_name': categoryName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessCode'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Category;
      return this.apiClient.callApi(
        '/catagories/{category_name}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
