/**
 * delat_shop
 * This is an example of using OAuth2 Access Code Flow in a specification to describe security to your API.
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Cart from '../model/Cart';
import InlineResponse2001 from '../model/InlineResponse2001';
import User from '../model/User';

/**
* Admin service.
* @module api/AdminApi
* @version 4.0.0
*/
export default class AdminApi {

    /**
    * Constructs a new AdminApi. 
    * @alias module:api/AdminApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deletePendingItemsByUserId operation.
     * @callback module:api/AdminApi~deletePendingItemsByUserIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * remove item from pending as mean to cancel order
     * @param {Number} userId 
     * @param {Number} cartId 
     * @param {module:api/AdminApi~deletePendingItemsByUserIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deletePendingItemsByUserId(userId, cartId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling deletePendingItemsByUserId");
      }
      // verify the required parameter 'cartId' is set
      if (cartId === undefined || cartId === null) {
        throw new Error("Missing the required parameter 'cartId' when calling deletePendingItemsByUserId");
      }

      let pathParams = {
        'user_id': userId,
        'cart_id': cartId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessCode'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/users/{user_id}/pending_items/{cart_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteUserById operation.
     * @callback module:api/AdminApi~deleteUserByIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delet user account by id
     * @param {Number} userId 
     * @param {module:api/AdminApi~deleteUserByIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteUserById(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling deleteUserById");
      }

      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessCode'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/users/{user_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserById operation.
     * @callback module:api/AdminApi~getUserByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a User by ID.
     * @param {Number} userId 
     * @param {module:api/AdminApi~getUserByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    getUserById(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getUserById");
      }

      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessCode'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = User;
      return this.apiClient.callApi(
        '/users/{user_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAdminTotalProfit operation.
     * @callback module:api/AdminApi~listAdminTotalProfitCallback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * admin profit in defined period
     * @param {Object} opts Optional parameters
     * @param {Date} opts.startPeriod 
     * @param {Date} opts.endPeriod 
     * @param {module:api/AdminApi~listAdminTotalProfitCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    listAdminTotalProfit(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'start_period': opts['startPeriod'],
        'end_period': opts['endPeriod']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessCode'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/admin/profits', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listPendingItemsByUserId operation.
     * @callback module:api/AdminApi~listPendingItemsByUserIdCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Cart>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * list pending items for user
     * @param {Number} userId 
     * @param {module:api/AdminApi~listPendingItemsByUserIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Cart>}
     */
    listPendingItemsByUserId(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling listPendingItemsByUserId");
      }

      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessCode'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Cart];
      return this.apiClient.callApi(
        '/users/{user_id}/pending_items', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listProductsAnalytics operation.
     * @callback module:api/AdminApi~listProductsAnalyticsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2001} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * products data of number being sold in period
     * @param {Object} opts Optional parameters
     * @param {Date} opts.startPeriod 
     * @param {Date} opts.endPeriod 
     * @param {module:model/String} opts.timeAggregation 
     * @param {Number} opts.limit This is the maximum number of objects that may be returned. A query may return fewer than the value of limit due to filtering. (default to 30)
     * @param {String} opts.after This is the cursor that points to the end of the page use for next page
     * @param {String} opts.before This is the cursor that points to the start of the page for prev page
     * @param {module:api/AdminApi~listProductsAnalyticsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2001}
     */
    listProductsAnalytics(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'start_period': opts['startPeriod'],
        'end_period': opts['endPeriod'],
        'time_aggregation': opts['timeAggregation'],
        'limit': opts['limit'],
        'after': opts['after'],
        'before': opts['before']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessCode'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2001;
      return this.apiClient.callApi(
        '/products/analytics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listUsers operation.
     * @callback module:api/AdminApi~listUsersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all regesterd users.
     * @param {module:api/AdminApi~listUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    listUsers(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessCode'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = User;
      return this.apiClient.callApi(
        '/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateUserById operation.
     * @callback module:api/AdminApi~updateUserByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updating/create user
     * @param {Number} userId 
     * @param {module:model/User} user 
     * @param {module:api/AdminApi~updateUserByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    updateUserById(userId, user, callback) {
      let postBody = user;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling updateUserById");
      }
      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling updateUserById");
      }

      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessCode'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = User;
      return this.apiClient.callApi(
        '/users/{user_id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
